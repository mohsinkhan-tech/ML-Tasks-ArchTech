# -*- coding: utf-8 -*-
"""ML TASK 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jyGQu5zyimrHjBDuV5ksLrzXUle3_V1-
"""

# Task 2: MNIST Digit Recognition

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Loading Dataset

(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Preprocessing

X_train = X_train / 255.0   # Normalize pixels (0-1)
X_test = X_test / 255.0
y_train = to_categorical(y_train, 10)  # One-hot encoding
y_test = to_categorical(y_test, 10)

# Build Model (MLP Neural Network)

model = Sequential([
    Flatten(input_shape=(28,28)),     # Flatten 28x28 → 784
    Dense(128, activation='relu'),    # Hidden layer
    Dense(64, activation='relu'),     # Hidden layer
    Dense(10, activation='softmax')   # Output layer (10 digits)
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train Model

history = model.fit(X_train, y_train, epochs=5, batch_size=128, validation_split=0.1, verbose=2)

# Evaluate

loss, acc = model.evaluate(X_test, y_test, verbose=0)
print(f"✅ Test Accuracy: {acc*100:.2f}%")

# Predict & Show Example

predictions = model.predict(X_test[:10])
plt.figure(figsize=(12,4))
for i in range(10):
    plt.subplot(2,5,i+1)
    plt.imshow(X_test[i], cmap="gray")
    plt.title(f"Pred: {np.argmax(predictions[i])}")
    plt.axis("off")
plt.show()